group 'com.agileengine'
version '1.0-SNAPSHOT'

import groovy.sql.Sql

def h2Version = '1.4.187'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.0'
    }
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'com.bmuschko.tomcat'
apply plugin: 'findbugs'

war.baseName = 'callboard'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    //tomcat
    def tomcatVersion = '8.0.9'
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
        exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }

    // servlets/ jstl
    compile "javax.servlet:javax.servlet-api:3.1.0"
    compile "javax.servlet.jsp:javax.servlet.jsp-api:2.3.1"
    compile "javax.servlet:jstl:1.2"

    // spring
    def springVersion = '4.2.4.RELEASE'
    compile "org.springframework:spring-core:${springVersion}"
    compile "org.springframework:spring-web:${springVersion}"
    compile "org.springframework:spring-webmvc:${springVersion}"
    compile "org.springframework:spring-jdbc:${springVersion}"
    compile "org.springframework:spring-tx:${springVersion}"
    compile "org.springframework:spring-aop:${springVersion}"

    def aspectjVersion = '1.8.7'
    //aspectj
    compile "org.aspectj:aspectjrt:${aspectjVersion}"
    compile "org.aspectj:aspectjtools:${aspectjVersion}"

    //db
    compile "com.h2database:h2:${h2Version}"

    //test
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile "org.springframework:spring-test:${springVersion}"

    def dbUnitVersion = '2.2'
    testCompile "dbunit:dbunit:${dbUnitVersion}"

    testCompile 'org.mockito:mockito-all:1.9.5'


    //utils
    compile "com.google.guava:guava:19.0-rc3";
    compile "org.apache.commons:commons-lang3:3.0";

    //jackson
    def jacksonVersion = '2.5.0';
    compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}";
    compile "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}";

    // persistence pool
    compile "commons-dbcp:commons-dbcp:1.4";

    sourceSets {
        unitTest {
            java {
                srcDirs = ["test"]
            }
        }
    }
}

configurations { driver }

dependencies {
    driver "com.h2database:h2:${h2Version}"
}

URLClassLoader loader = GroovyObject.class.classLoader
configurations.driver.each {File file ->
    loader.addURL(file.toURL())
}

task initSchema << {
    Properties props = new Properties()
    props.load(new FileInputStream("src/main/resources/persistence.properties"))
    def credentialProperties = [user: props.getProperty("jdbc.username"),
                       password: props.getProperty("jdbc.password")] as Properties
    def sql = Sql.newInstance(props.getProperty("jdbc.url"),
                              credentialProperties,
                              props.getProperty("jdbc.driverClassName"))
    String sqlString = new File('db/schema.sql').text
    sql.execute(sqlString)
    sql.close()
}
gradle.projectsEvaluated {
    findbugsMain.dependsOn(initSchema)
}
gradle.projectsEvaluated {
    test.dependsOn(findbugsMain)
}

gradle.projectsEvaluated {
    war.dependsOn(test)
}
findbugsMain {
     excludeFilter file('src/main/resources/findBugsExclude.xml')
}